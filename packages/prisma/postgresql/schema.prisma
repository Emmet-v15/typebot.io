generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                          String                    @id @default(cuid())
  name                        String?
  email                       String?                   @unique
  emailVerified               DateTime?
  image                       String?
  createdAt                   DateTime                  @default(now())
  lastActivityAt              DateTime                  @default(now())
  updatedAt                   DateTime                  @default(now()) @updatedAt
  company                     String?
  onboardingCategories        Json
  graphNavigation             GraphNavigation?
  preferredAppAppearance      String?
  displayedInAppNotifications Json?
  referral                    String?
  accounts                    Account[]
  apiTokens                   ApiToken[]
  bannedIps                   BannedIp[]
  CollaboratorsOnTypebots     CollaboratorsOnTypebots[]
  workspaces                  MemberInWorkspace[]
  sessions                    Session[]
}

model ApiToken {
  id        String   @id @default(cuid())
  token     String   @unique
  name      String
  ownerId   String
  createdAt DateTime @default(now())
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Workspace {
  id                            String                @id @default(cuid())
  name                          String
  icon                          String?
  createdAt                     DateTime              @default(now())
  plan                          Plan                  @default(FREE)
  stripeId                      String?               @unique
  additionalChatsIndex          Int                   @default(0)
  additionalStorageIndex        Int                   @default(0)
  chatsLimitFirstEmailSentAt    DateTime?
  chatsLimitSecondEmailSentAt   DateTime?
  storageLimitFirstEmailSentAt  DateTime?
  storageLimitSecondEmailSentAt DateTime?
  customChatsLimit              Int?
  customSeatsLimit              Int?
  customStorageLimit            Int?
  updatedAt                     DateTime              @default(now()) @updatedAt
  isQuarantined                 Boolean               @default(false)
  isSuspended                   Boolean               @default(false)
  isPastDue                     Boolean               @default(false)
  isVerified                    Boolean?
  claimableCustomPlan           ClaimableCustomPlan?
  credentials                   Credentials[]
  customDomains                 CustomDomain[]
  folders                       DashboardFolder[]
  members                       MemberInWorkspace[]
  themeTemplates                ThemeTemplate[]
  typebots                      Typebot[]
  invitations                   WorkspaceInvitation[]
}

model MemberInWorkspace {
  userId      String
  workspaceId String
  role        WorkspaceRole
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}

model WorkspaceInvitation {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  email       String
  workspaceId String
  type        WorkspaceRole
  updatedAt   DateTime      @default(now()) @updatedAt
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model CustomDomain {
  name        String    @id
  createdAt   DateTime  @default(now())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Credentials {
  id          String    @id @default(cuid())
  data        String
  name        String
  type        String
  iv          String
  createdAt   DateTime  @default(now())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DashboardFolder {
  id             String            @id @default(cuid())
  createdAt      DateTime          @default(now())
  name           String
  parentFolderId String?
  updatedAt      DateTime          @default(now()) @updatedAt
  workspaceId    String
  parentFolder   DashboardFolder?  @relation("ParentChild", fields: [parentFolderId], references: [id])
  childrenFolder DashboardFolder[] @relation("ParentChild")
  workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  typebots       Typebot[]
}

model Typebot {
  id                      String                    @id @default(cuid())
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @default(now()) @updatedAt
  name                    String
  folderId                String?
  groups                  Json
  variables               Json
  edges                   Json
  theme                   Json
  settings                Json
  publicId                String?                   @unique
  customDomain            String?                   @unique
  icon                    String?
  workspaceId             String
  resultsTablePreferences Json?
  isArchived              Boolean                   @default(false)
  isClosed                Boolean                   @default(false)
  version                 String?
  selectedThemeTemplateId String?
  whatsAppCredentialsId   String?
  events                  Json?
  riskLevel               Int?
  bannedIps               BannedIp[]
  collaborators           CollaboratorsOnTypebots[]
  conversations           Conversation[]
  invitations             Invitation[]
  publishedTypebot        PublicTypebot?
  results                 Result[]
  folder                  DashboardFolder?          @relation(fields: [folderId], references: [id])
  workspace               Workspace                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  webhooks                Webhook[]

  @@index([workspaceId])
  @@index([isArchived, createdAt(sort: Desc)])
}

model Conversation {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  typebotId   String
  threadId    String?
  callback    Callback?
  typebot     Typebot      @relation(fields: [typebotId], references: [id], onDelete: Cascade)
  transcripts Transcript[]
}

model Callback {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  demoURL        String?
  email          String?
  phone          String?
  ip             String?
  country        String?
  conversationId String       @unique
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Transcript {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  finishedAt     DateTime      @default(now()) @updatedAt
  userMessage    String?
  botMessage     String?
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
}

model Invitation {
  email     String
  typebotId String
  type      CollaborationType
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt
  typebot   Typebot           @relation(fields: [typebotId], references: [id], onDelete: Cascade)

  @@unique([email, typebotId])
}

model CollaboratorsOnTypebots {
  userId    String
  typebotId String
  type      CollaborationType
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt
  typebot   Typebot           @relation(fields: [typebotId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, typebotId])
}

model PublicTypebot {
  id        String   @id @default(cuid())
  typebotId String   @unique
  groups    Json
  variables Json
  edges     Json
  theme     Json
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  version   String?
  events    Json?
  typebot   Typebot  @relation(fields: [typebotId], references: [id], onDelete: Cascade)
}

model Result {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  typebotId   String
  isCompleted Boolean
  variables   Json
  hasStarted  Boolean?
  isArchived  Boolean?      @default(false)
  answers     Answer[]
  logs        Log[]
  typebot     Typebot       @relation(fields: [typebotId], references: [id], onDelete: Cascade)
  edges       VisitedEdge[]

  @@index([typebotId, hasStarted, createdAt(sort: Desc)])
  @@index([typebotId, isCompleted])
}

model VisitedEdge {
  resultId String
  edgeId   String
  index    Int
  result   Result @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@unique([resultId, index])
}

model Log {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  resultId    String
  status      String
  description String
  details     String?
  result      Result   @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@index([resultId])
}

model Answer {
  createdAt   DateTime @default(now()) @updatedAt
  resultId    String
  groupId     String
  blockId     String
  content     String
  variableId  String?
  storageUsed Int?
  itemId      String?
  result      Result   @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@unique([resultId, blockId, groupId])
  @@index([blockId, itemId])
}

model Coupon {
  userPropertiesToUpdate Json
  code                   String    @id @unique
  dateRedeemed           DateTime?
}

model Webhook {
  id          String   @id @default(cuid())
  url         String?
  method      String
  queryParams Json
  headers     Json
  body        String?
  typebotId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  typebot     Typebot  @relation(fields: [typebotId], references: [id], onDelete: Cascade)
}

model ClaimableCustomPlan {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  claimedAt    DateTime?
  name         String
  description  String?
  price        Int
  currency     String
  workspaceId  String    @unique
  chatsLimit   Int
  storageLimit Int
  seatsLimit   Int
  companyName  String?
  isYearly     Boolean   @default(false)
  vatType      String?
  vatValue     String?
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ChatSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  state     Json
}

model ThemeTemplate {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  name        String
  theme       Json
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model BannedIp {
  id                   String   @id @default(cuid())
  createdAt            DateTime @default(now())
  ip                   String   @unique
  responsibleTypebotId String
  userId               String
  responsibleTypebot   Typebot  @relation(fields: [responsibleTypebotId], references: [id])
  user                 User     @relation(fields: [userId], references: [id])
}

enum WorkspaceRole {
  ADMIN
  MEMBER
  GUEST
  ANALYTICS
}

enum GraphNavigation {
  MOUSE
  TRACKPAD
}

enum Plan {
  FREE
  STARTER
  PRO
  LIFETIME
  OFFERED
  CUSTOM
  UNLIMITED
}

enum CollaborationType {
  READ
  WRITE
  FULL_ACCESS
}
